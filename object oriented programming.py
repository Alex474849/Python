
# Инкапсуляция в классе "кошелек"

class Purse:

    def __init__(self, valuta, name='Unknown'):         # Метод init это конструктор объекта, который позволяет во время создания класса передать ему значения которые будут записаны далее
        if valuta not in ('USD', 'EUR'): 
            raise ValueError
        self.__money = 0                                  # Self нужен для того чтобы, передать данный параметр созданным далее экземплярам
        self.valuta =  valuta
        self.name = name

    def top_up_balance(self, howmany):                  # метод с помошью которого мы будем попполнять баланс и создаем атрибут howmany, которрый означает на сколько мы будем пополнять балан
        self.__money = self.money + howmany               # Прибаляем к текушему балансу money + howmany
        return howmany
    def top_down_balance(self, howmany):                # метод для списания средств с баланса
        if self.__money - howmany < 0:                    # Пишем условия, если балан при списании окажется меньше нуля. то выводить ошибку "Недостаточно средств"
            print('Недостаточно средств')
            raise ValueError('Недостаточно средств')    
        self.__money = self.__money - howmany 
        return howmany
    def info(self):                                     # метод выводит информацию о балансе 
        print(self.__money)

    def __del__(self):                                  # Метод, который будет удалять кошелек
        print('Кошелек удален') 
        


x = Purse('USD')
y = Purse('EUR', 'Jack')
x._money 
x.info()




# По большому счету инкапсуляция = это сокрытие внутренник процессов, чтобы никто не мог их измееить
# Одно _ одно нижнее подчнркивание более лояльно в параметре money, то есть можно изменить баланс в коде, __ два подчеркивания
# в параметре money означает, что сокрытие настолько категорично и без изменения всего кода, изменение баланса невозможно 

